validate_and_route:
  description: >
    Analyze user query: "{user_query}"
    Chat history: {chat_history}

    **Goal:** Understand intent and route to the right workflow.

    Process:
    1. Review chat history for context and past topics
    2. Determine if the query is standalone or refers to earlier messages
    3. Infer true user intent from conversation flow

    Decision rules:
    - SEARCH: User seeks information AND you can identify WHAT topic they want
      → Do NOT choose SEARCH if you don't know what topic they want
    - DIRECT_RESPONSE: Social or general reply with no info request
    - NEEDS_CLARIFICATION: User wants to search but you CANNOT identify what topic they want


    **Tip:** When unsure between SEARCH and DIRECT → choose SEARCH.
  expected_output: >
    OrchestratorOutput (decision, reasoning, relevant fields)
  agent: orchestrator


search_and_analyze:
  description: >
    User query: "{user_query}"
    Context: {context}
    Chat history: {chat_history}

    **Check orchestrator decision first.**

    If decision = SEARCH:
      1. Extract search intent (core topic/entity)
      2. Generate ONE optimized query (focused, clean, uses synonyms if needed)
      3. Execute search and return structured results

    If decision = DIRECT_RESPONSE or NEEDS_CLARIFICATION:
      Skip search.
  expected_output: >
    RAGAnalyzerOutput (search_result or skip flag)
  agent: rag_analyzer


generate_response:
  description: >
    Answer: "{user_query}"
    Context: {context}
    Chat history: {chat_history}

    **Follow orchestrator decision:**
    - NEEDS_CLARIFICATION → Ask short clarification
    - DIRECT_RESPONSE → Reply from general knowledge (type="DIRECT")
    - SEARCH → Check RAG analyzer decision:
      * If RAG decision = SEARCH_PERFORMED → Use verified relevant docs (type="SEARCH_BASED")
      * If RAG decision = SKIPPED → Reply from general knowledge (type="DIRECT")
      * If docs irrelevant → Admit it and optionally answer generally

    Rules:
    - Respond in user’s language
    - Don’t force irrelevant sources
    - Reference chat history when useful
  expected_output: >
    ChatResponderOutput (response, type, sources, language)
  agent: chat_responder
