validate_and_route:
  description: >
    Validate and understand the user query: "{user_query}"
    
    Chat history (for context):
    {chat_history}
    
    Task:
    1. Analyze the query to detect basic intent (consider chat history if available).
    2. Be flexible — ask clarification only if essential info is missing.
    3. Decide routing type:
    
    Decision types:
    - NEEDS_CLARIFICATION:
      → Query lacks key info or context.
      → Examples:
        * "ค้นหา", "search" (no target)
        * "help me" (no context)
        * "what about that thing" (unclear)
        * "API" alone
        * gibberish or empty text
      → Clear examples (no clarification needed):
        * "ค้นหาข้อมูล API" / "search API info"
        * "วิธีใช้ REST API" / "how to use REST API"
        * "เอกสารเกี่ยวกับ authentication"
      → Stop workflow and return clarification questions.

    - SEARCH_REQUIRED:
      → Query needs document retrieval (technical, factual, specific info).
      → Even vague queries can proceed — RAG Analyzer will refine searches.
      → Route to RAG Analyzer.

    - DIRECT_RESPONSE:
      → General knowledge, greetings, or small talk.
      → Skip search; route to Chat Responder.

    Rules:
    - Focus on validation before routing.
    - If query has a clear topic → proceed.
    - If only action word → ask for clarification.
    - NEEDS_CLARIFICATION stops flow; DIRECT_RESPONSE skips RAG; SEARCH_REQUIRED triggers RAG.
  expected_output: >
    Return OrchestratorOutput with the selected decision type.
  agent: orchestrator


search_and_analyze:
  description: >
    Search for relevant documents for user query: "{user_query}"
    
    Chat history (for context):
    {chat_history}
    
    Context:
    {context}
    
    Task:
    1. Check orchestrator decision:
       - DIRECT_RESPONSE → skip search, return empty results.
       - SEARCH_REQUIRED → perform document search.
       - NEEDS_CLARIFICATION → should not be called.
    2. For SEARCH_REQUIRED:
       - Generate best search keywords.
       - Use the search tool (embedding + reranking).
       - If no results, retry with synonyms or alternate phrasing (2–3 strategies).
       - Output structured results, no summarization.
    
    Strategy tips:
    - Start with direct keywords.
    - Retry with synonyms, broader/narrower terms, or other languages.
    - Be persistent and creative.
    
    Tool:
    - search → semantic + reranking combined.
  expected_output: >
    Return RAGAnalyzerOutput with search results or skip flag.
  agent: rag_analyzer


generate_response:
  description: >
    Generate a natural, validated response to user query: "{user_query}"
    
    Chat history (for context):
    {chat_history}
    
    Context:
    {context}
    
    Task:
    1. Check orchestrator decision:
       - NEEDS_CLARIFICATION → return clarification message.
       - DIRECT_RESPONSE → reply using general knowledge (no search).
       - SEARCH_REQUIRED → analyze search results and respond.
    2. For SEARCH_REQUIRED:
        - Validate if documents truly answer the query (consider chat history for context).
        - If relevant → generate sourced, complete answer.
        - If not → say none found; optionally provide general info.
    3. For DIRECT_RESPONSE:
        - Respond conversationally using general knowledge.
        - Use chat history to maintain conversation continuity.
        - Indicate info not from documents.
    4. For NEEDS_CLARIFICATION:
        - Return clarification only, no further output.
    5. Ensure response fully answers the question.
    6. **Always reply in the same language as the user query.**
        - Thai → respond in Thai; English → respond in English.
    7. Be transparent about knowledge limits.
    8. Reference previous messages from chat history when appropriate.
  expected_output: >
    Return ChatResponderOutput with final response, type, and sources if any.
  agent: chat_responder